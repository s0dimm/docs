KubeVirt - это дополнение для запуска виртуальных машин в Kubernetes. Обычно работает на bare-metal кластерах.
Как устроен KubeVirt:

    Основа KubeVirt — это virt-operator, который деплоит остальные микросервисы:
    virt-api — обслуживает все запросы к API для ресурсов виртуализации: например: сабресурсы для включения и выключения виртуальной машины или получения доступа к виртуальной консоли, а также запуск вебхуков проходят именно через него.
    virt-controller — контроллер-менеджер, который обслуживает ресурсы виртуализации: под каждую виртуальную машину он создает отдельный под, который запускает virt-launcher с нужными параметрами.
    virt-handler — отдельный DaemonSet, запускающийся на всех узлах кластера. По сути, он служит для расширения функционала kubelet, который донастраивает окружение пода для запуска виртуальной машины внутри него. На данный момент он отвечает за создание сетевых интерфейсов, а также используется для проброса dev/kvm и других устройств с узла внутрь пода.
    virt-launcher — отдельный бинарный исполняемый файл, запускающийся в каждом поде с виртуальной машиной, который отвечает за ее запуск через libvirt.

install:

apt install qemu-system libvirt-daemon-system

export VERSION=$(curl -s https://api.github.com/repos/kubevirt/kubevirt/releases | grep tag_name | grep -v -- '-rc' | sort -r | head -1 | awk -F': ' '{print $2}' | sed 's/,//' | xargs)
echo $VERSION
kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/${VERSION}/kubevirt-operator.yaml

kubectl -n kubevirt patch kubevirt kubevirt --type=merge --patch '{"spec":{"configuration":{"developerConfiguration":{"useEmulation":true}}}}'

kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/${VERSION}/kubevirt-cr.yaml

VERSION=$(kubectl get kubevirt.kubevirt.io/kubevirt -n kubevirt -o=jsonpath="{.status.observedKubeVirtVersion}")
ARCH=$(uname -s | tr A-Z a-z)-$(uname -m | sed 's/x86_64/amd64/') || windows-amd64.exe
echo ${ARCH}
curl -L -o virtctl https://github.com/kubevirt/kubevirt/releases/download/${VERSION}/virtctl-${VERSION}-${ARCH}
chmod +x virtctl
sudo install virtctl /usr/local/bin

START:

способ первый:

билдим docker image:
cat << END > Dockerfile
FROM kubevirt/container-disk-v1alpha
ADD debian11.qcow2 /disk
END
 
docker build -t $docker_registry/debian:11 .
docker push $docker_registry/debian:11

ставим cdi:

export VERSION=$(basename $(curl -s -w %{redirect_url} https://github.com/kubevirt/containerized-data-importer/releases/latest))
kubectl create -f https://github.com/kubevirt/containerized-data-importer/releases/download/$VERSION/cdi-operator.yaml
kubectl create -f https://github.com/kubevirt/containerized-data-importer/releases/download/$VERSION/cdi-cr.yaml
kubectl get cdi cdi -n cdi

поддерживаемый тип volumes:

    cloudInitNoCloud
    cloudInitConfigDrive
    persistentVolumeClaim
    dataVolume
    ephemeral
    containerDisk
    emptyDisk
    hostDisk
    configMap
    secret
    serviceAccount
    downwardMetrics

примитивный yaml для создание ВМ:

kind: VirtualMachine
metadata:
  labels:
    kubevirt.io/vm: debian-vm
  name: debian-vm
spec:
  running: false
  template:
    metadata:
      labels:
        kubevirt.io/vm: debian-vm
    spec:
      domain:
        devices:
          disks:
          - disk:
              bus: virtio
            name: datavolumedisk1
        resources:
          requests:
            memory: 1024M
      networks:
      - name: default
        pod: {}
      volumes:
      - dataVolume:
          name: debian-dv
        name: datavolumedisk1
  dataVolumeTemplates:
  - metadata:
      name: debian-dv
    spec:
      pvc:
        accessModes:
        - ReadWriteOnce
        storageClassName: hdd
        resources:
          requests:
            storage: 5Gi
      source:
        http:
          url: https://harbor.nextcontact.ru/tools/debian:11